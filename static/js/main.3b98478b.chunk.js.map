{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","board","score","gameOver","message","i","row","j","push","this","setRandom","setState","emptyGrids","getEmptyGrids","randomCoordinate","Math","floor","random","length","randomNumber","getStartingNum","col","startingNumbers","previous","updated","JSON","stringify","direction","movedLeft","strikeLeft","isChangeinBoard","leftWithRandom","isGameOver","checkForGameWon","movedRight","strikeRight","rightWithRandom","movedUp","strikeUp","upWithRandom","movedDown","strikeDown","downWithRandom","inputBoard","r","c","current","unshift","rotatedRight","rotateToRight","rotateToLeft","result","includes","createBoard","document","querySelector","addEventListener","controlArrowKeys","bind","e","keyCode","strike","className","onClick","map","key","React","Component","Row","cell","cellValue","Cell","value","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b98478b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      board: null,\r\n      score: 0,\r\n      gameOver: false,\r\n      message: null,\r\n    };\r\n  }\r\n\r\n  createBoard() {\r\n    //let board = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]];\r\n    let board = [];\r\n    const n = 4; //n can be changed to any size we want\r\n    for (let i = 0; i < n; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < n; j++) {\r\n        row.push(0);\r\n      }\r\n      board.push(row);\r\n    }\r\n    board = this.setRandom(this.setRandom(board));\r\n    this.setState({ board, score: 0, gameOver: false, message: null });\r\n  }\r\n\r\n  setRandom(board) {\r\n    const emptyGrids = this.getEmptyGrids(board);\r\n    const randomCoordinate = emptyGrids[Math.floor(Math.random() * emptyGrids.length)];\r\n    const randomNumber = this.getStartingNum();\r\n    board[randomCoordinate[0]][randomCoordinate[1]] = randomNumber;\r\n    return board;\r\n  }\r\n\r\n  getEmptyGrids(board) {\r\n    const emptyGrids = [];\r\n    for (let row = 0; row < board.length; row++) {\r\n      for (let col = 0; col < board[row].length; col++) {\r\n        if (board[row][col] === 0) { emptyGrids.push([row, col]) }\r\n      }\r\n    }\r\n    return emptyGrids;\r\n  }\r\n\r\n  getStartingNum() {\r\n    const startingNumbers = [2, 4];\r\n    const randomNumber = startingNumbers[Math.floor(Math.random() * startingNumbers.length)];\r\n    return randomNumber;\r\n  }\r\n\r\n  isChangeinBoard(previous, updated) {\r\n    return (JSON.stringify(updated) !== JSON.stringify(previous)) ? true : false;\r\n  }\r\n\r\n  checkForGameWon(board) {\r\n    for (let row = 0; row < board.length; row++) {\r\n      for (let col = 0; col < board[row].length; col++) {\r\n        if (board[row][col] === 2048) {\r\n          this.setState({ gameOver: true, message: 'You Won!' });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  strike(direction) {\r\n    if (!this.state.gameOver) {\r\n      if (direction === 'left') {\r\n        const movedLeft = this.strikeLeft(this.state.board);\r\n        if (this.isChangeinBoard(this.state.board, movedLeft.board)) {\r\n          const leftWithRandom = this.setRandom(movedLeft.board);\r\n\r\n          if (this.isGameOver(leftWithRandom)) {\r\n            this.setState({ board: leftWithRandom, gameOver: true, message: 'Game over!' });\r\n          }\r\n          else if (this.checkForGameWon(leftWithRandom)) {\r\n            this.setState({ gameOver: true, message: 'You Won!' });\r\n          }\r\n          else {\r\n            this.setState({ board: leftWithRandom, score: this.state.score += movedLeft.score });\r\n          }\r\n        }\r\n      }\r\n      else if (direction === 'right') {\r\n        const movedRight = this.strikeRight(this.state.board);\r\n        if (this.isChangeinBoard(this.state.board, movedRight.board)) {\r\n          const rightWithRandom = this.setRandom(movedRight.board);\r\n\r\n          if (this.isGameOver(rightWithRandom)) {\r\n            this.setState({ board: rightWithRandom, gameOver: true, message: 'Game over!' });\r\n          } else if (this.checkForGameWon(rightWithRandom)) {\r\n            this.setState({ gameOver: true, message: 'You Won!' });\r\n          } else {\r\n            this.setState({ board: rightWithRandom, score: this.state.score += movedRight.score });\r\n          }\r\n        }\r\n      }\r\n      else if (direction === 'up') {\r\n        const movedUp = this.strikeUp(this.state.board);\r\n        if (this.isChangeinBoard(this.state.board, movedUp.board)) {\r\n          const upWithRandom = this.setRandom(movedUp.board);\r\n\r\n          if (this.isGameOver(upWithRandom)) {\r\n            this.setState({ board: upWithRandom, gameOver: true, message: 'Game over!' });\r\n          } else if (this.checkForGameWon(upWithRandom)) {\r\n            this.setState({ gameOver: true, message: 'You Won!' });\r\n          } else {\r\n            this.setState({ board: upWithRandom, score: this.state.score += movedUp.score });\r\n          }\r\n        }\r\n      }\r\n      else if (direction === 'down') {\r\n        const movedDown = this.strikeDown(this.state.board);\r\n        if (this.isChangeinBoard(this.state.board, movedDown.board)) {\r\n          const downWithRandom = this.setRandom(movedDown.board);\r\n\r\n          if (this.isGameOver(downWithRandom)) {\r\n            this.setState({ board: downWithRandom, gameOver: true, message: 'Game over!' });\r\n          } else if (this.checkForGameWon(downWithRandom)) {\r\n            this.setState({ gameOver: true, message: 'You Won!' });\r\n          } else {\r\n            this.setState({ board: downWithRandom, score: this.state.score += movedDown.score });\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        this.setState({ message: 'Sorry :( Game Over.' });\r\n      }\r\n    }\r\n  }\r\n\r\n  strikeLeft(inputBoard) {\r\n    let board = [];\r\n    let score = 0;\r\n    for (let r = 0; r < inputBoard.length; r++) {\r\n      let row = [];\r\n      for (let c = inputBoard[r].length - 1; c >= 0; c--) {\r\n        let current = inputBoard[r][c];\r\n        (current === 0) ? row.push(current) : row.unshift(current);\r\n      }\r\n      board.push(row);\r\n    }\r\n    for (let r = 0; r < board.length; r++) {\r\n      for (let c = 0; c < board.length; c++) {\r\n        if (board[r][c] > 0 && board[r][c] === board[r][c + 1]) {\r\n          board[r][c] = board[r][c] * 2;\r\n          board[r][c + 1] = 0;\r\n          //add score\r\n          score += board[r][c];\r\n        }\r\n        else if (board[r][c] === 0 && board[r][c + 1] > 0) {\r\n          board[r][c] = board[r][c + 1];\r\n          board[r][c + 1] = 0;\r\n        }\r\n      }\r\n    }\r\n    return { board, score };\r\n  }\r\n\r\n  strikeRight(inputBoard) {\r\n    let board = [];\r\n    let score = 0;\r\n    for (let r = 0; r < inputBoard.length; r++) {\r\n      let row = [];\r\n      for (let c = 0; c < inputBoard[r].length; c++) {\r\n        let current = inputBoard[r][c];\r\n        (current === 0) ? row.unshift(current) : row.push(current);\r\n      }\r\n      board.push(row);\r\n    }\r\n    for (let r = 0; r < board.length; r++) {\r\n      for (let c = board[r].length - 1; c >= 0; c--) {\r\n        if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\r\n          board[r][c] = board[r][c] * 2;\r\n          board[r][c - 1] = 0;\r\n          //add score\r\n          score += board[r][c];\r\n        }\r\n        else if (board[r][c] === 0 && board[r][c - 1] > 0) {\r\n          board[r][c] = board[r][c - 1];\r\n          board[r][c - 1] = 0;\r\n        }\r\n      }\r\n    }\r\n    return { board, score };\r\n  }\r\n\r\n  strikeUp(inputBoard) {\r\n    let rotatedRight = this.rotateToRight(inputBoard);\r\n    let board = [];\r\n    let score = 0;\r\n    for (let r = 0; r < rotatedRight.length; r++) {\r\n      let row = [];\r\n      for (let c = 0; c < rotatedRight[r].length; c++) {\r\n        let current = rotatedRight[r][c];\r\n        (current === 0) ? row.unshift(current) : row.push(current);\r\n      }\r\n      board.push(row);\r\n    }\r\n    for (let r = 0; r < board.length; r++) {\r\n      for (let c = board[r].length - 1; c >= 0; c--) {\r\n        if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\r\n          board[r][c] = board[r][c] * 2;\r\n          board[r][c - 1] = 0;\r\n          //add score\r\n          score += board[r][c];\r\n        }\r\n        else if (board[r][c] === 0 && board[r][c - 1] > 0) {\r\n          board[r][c] = board[r][c - 1];\r\n          board[r][c - 1] = 0;\r\n        }\r\n      }\r\n    }\r\n    board = this.rotateToLeft(board);\r\n    return { board, score };\r\n  }\r\n\r\n  strikeDown(inputBoard) {\r\n    let rotatedRight = this.rotateToRight(inputBoard);\r\n    let board = [];\r\n    let score = 0;\r\n\r\n    for (let r = 0; r < rotatedRight.length; r++) {\r\n      let row = [];\r\n      for (let c = rotatedRight[r].length - 1; c >= 0; c--) {\r\n        let current = rotatedRight[r][c];\r\n        (current === 0) ? row.push(current) : row.unshift(current);\r\n      }\r\n      board.push(row);\r\n    }\r\n\r\n    for (let r = 0; r < board.length; r++) {\r\n      for (let c = 0; c < board.length; c++) {\r\n        if (board[r][c] > 0 && board[r][c] === board[r][c + 1]) {\r\n          board[r][c] = board[r][c] * 2;\r\n          board[r][c + 1] = 0;\r\n          //add score\r\n          score += board[r][c];\r\n        }\r\n        else if (board[r][c] === 0 && board[r][c + 1] > 0) {\r\n          board[r][c] = board[r][c + 1];\r\n          board[r][c + 1] = 0;\r\n        }\r\n      }\r\n    }\r\n    board = this.rotateToLeft(board);\r\n    return { board, score };\r\n  }\r\n\r\n  rotateToLeft(inputBoard) {\r\n    let result = [];\r\n\r\n    for (let c = inputBoard.length - 1; c >= 0; c--) {\r\n      let row = [];\r\n      for (let r = inputBoard.length - 1; r >= 0; r--) {\r\n        row.unshift(inputBoard[r][c]);\r\n      }\r\n      result.push(row);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  rotateToRight(inputBoard) {\r\n    let result = [];\r\n    for (let c = 0; c < inputBoard.length; c++) {\r\n      let row = [];\r\n      for (let r = inputBoard.length - 1; r >= 0; r--) {\r\n        row.push(inputBoard[r][c]);\r\n      }\r\n      result.push(row);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  isGameOver(board) {\r\n    let moves = [\r\n      this.isChangeinBoard(board, this.strikeUp(board).board),\r\n      this.isChangeinBoard(board, this.strikeRight(board).board),\r\n      this.isChangeinBoard(board, this.strikeDown(board).board),\r\n      this.isChangeinBoard(board, this.strikeLeft(board).board)\r\n    ];\r\n    return (moves.includes(true)) ? false : true;\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.createBoard();\r\n    const body = document.querySelector('body');\r\n    body.addEventListener('keydown', this.controlArrowKeys.bind(this));\r\n  }\r\n\r\n  controlArrowKeys(e) {\r\n    const left = 37;\r\n    const right = 39;\r\n    const up = 38;\r\n    const down = 40;\r\n\r\n    if (e.keyCode === left) {\r\n      this.strike('left');\r\n    }\r\n    else if (e.keyCode === right) {\r\n      this.strike('right');\r\n    }\r\n    else if (e.keyCode === up) {\r\n      this.strike('up');\r\n    }\r\n    else if (e.keyCode === down) {\r\n      this.strike('down');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"sticky\">2048 Game! PS: You can't win :p</div>\r\n        <p><b>Use the keyboard arrow keys or the buttons to play.</b></p>\r\n        <div className=\"button\" onClick={() => { this.createBoard() }}>New Game</div>\r\n\r\n        <div className=\"buttons\">\r\n          <div className=\"button\" onClick={() => { this.strike('left') }}>Left</div>\r\n          &nbsp;\r\n          <div className=\"button\" onClick={() => { this.strike('right') }}>Right</div>\r\n          &nbsp;\r\n          <div className=\"button\" onClick={() => { this.strike('up') }}>Up</div>\r\n          &nbsp;\r\n          <div className=\"button\" onClick={() => { this.strike('down') }}>Down</div>\r\n\r\n        </div>\r\n\r\n        <div className=\"score\">Score: {this.state.score}</div>\r\n        <table>\r\n          {this.state.board.map((row, i) => (<Row key={i} row={row} />))}\r\n        </table>\r\n          <h1 className=\"msg\"> {this.state.message}</h1> \r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst Row = ({ row }) => {\r\n  return (\r\n    <tr>\r\n      {row.map((cell, i) => (<Cell key={i} cellValue={cell} />))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst Cell = ({ cellValue }) => {\r\n  let value = (cellValue === 0) ? '' : cellValue;\r\n  return (\r\n    <td>\r\n      <div className='cell'>\r\n        <div className=\"number\">{value}</div>\r\n      </div>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}